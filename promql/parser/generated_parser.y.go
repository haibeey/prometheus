// Code generated by goyacc -o generated_parser.y.go generated_parser.y. DO NOT EDIT.

//line generated_parser.y:15
package parser

import __yyfmt__ "fmt"

//line generated_parser.y:15

import (
	"math"
	"sort"
	"strconv"
	"time"

	"github.com/prometheus/prometheus/pkg/labels"
	"github.com/prometheus/prometheus/pkg/value"
)

//line generated_parser.y:28
type yySymType struct {
	yys      int
	node     Node
	item     Item
	matchers []*labels.Matcher
	matcher  *labels.Matcher
	label    labels.Label
	labels   labels.Labels
	strings  []string
	series   []SequenceValue
	uint     uint64
	float    float64
	duration time.Duration
}

const ASSIGN = 57346
const BLANK = 57347
const COLON = 57348
const COMMA = 57349
const COMMENT = 57350
const DURATION = 57351
const EOF = 57352
const ERROR = 57353
const IDENTIFIER = 57354
const LEFT_BRACE = 57355
const LEFT_BRACKET = 57356
const LEFT_PAREN = 57357
const METRIC_IDENTIFIER = 57358
const NUMBER = 57359
const RIGHT_BRACE = 57360
const RIGHT_BRACKET = 57361
const RIGHT_PAREN = 57362
const SEMICOLON = 57363
const SPACE = 57364
const STRING = 57365
const TIMES = 57366
const operatorsStart = 57367
const ADD = 57368
const DIV = 57369
const EQL = 57370
const EQL_REGEX = 57371
const GTE = 57372
const GTR = 57373
const LAND = 57374
const LOR = 57375
const LSS = 57376
const LTE = 57377
const LUNLESS = 57378
const MOD = 57379
const MUL = 57380
const NEQ = 57381
const NEQ_REGEX = 57382
const POW = 57383
const SUB = 57384
const operatorsEnd = 57385
const aggregatorsStart = 57386
const AVG = 57387
const BOTTOMK = 57388
const COUNT = 57389
const COUNT_VALUES = 57390
const MAX = 57391
const MIN = 57392
const QUANTILE = 57393
const STDDEV = 57394
const STDVAR = 57395
const SUM = 57396
const TOPK = 57397
const aggregatorsEnd = 57398
const keywordsStart = 57399
const BOOL = 57400
const BY = 57401
const GROUP_LEFT = 57402
const GROUP_RIGHT = 57403
const IGNORING = 57404
const OFFSET = 57405
const ON = 57406
const WITHOUT = 57407
const keywordsEnd = 57408
const startSymbolsStart = 57409
const START_METRIC = 57410
const START_SERIES_DESCRIPTION = 57411
const START_EXPRESSION = 57412
const START_METRIC_SELECTOR = 57413
const startSymbolsEnd = 57414

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"ASSIGN",
	"BLANK",
	"COLON",
	"COMMA",
	"COMMENT",
	"DURATION",
	"EOF",
	"ERROR",
	"IDENTIFIER",
	"LEFT_BRACE",
	"LEFT_BRACKET",
	"LEFT_PAREN",
	"METRIC_IDENTIFIER",
	"NUMBER",
	"RIGHT_BRACE",
	"RIGHT_BRACKET",
	"RIGHT_PAREN",
	"SEMICOLON",
	"SPACE",
	"STRING",
	"TIMES",
	"operatorsStart",
	"ADD",
	"DIV",
	"EQL",
	"EQL_REGEX",
	"GTE",
	"GTR",
	"LAND",
	"LOR",
	"LSS",
	"LTE",
	"LUNLESS",
	"MOD",
	"MUL",
	"NEQ",
	"NEQ_REGEX",
	"POW",
	"SUB",
	"operatorsEnd",
	"aggregatorsStart",
	"AVG",
	"BOTTOMK",
	"COUNT",
	"COUNT_VALUES",
	"MAX",
	"MIN",
	"QUANTILE",
	"STDDEV",
	"STDVAR",
	"SUM",
	"TOPK",
	"aggregatorsEnd",
	"keywordsStart",
	"BOOL",
	"BY",
	"GROUP_LEFT",
	"GROUP_RIGHT",
	"IGNORING",
	"OFFSET",
	"ON",
	"WITHOUT",
	"keywordsEnd",
	"startSymbolsStart",
	"START_METRIC",
	"START_SERIES_DESCRIPTION",
	"START_EXPRESSION",
	"START_METRIC_SELECTOR",
	"startSymbolsEnd",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line generated_parser.y:733

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 31,
	1, 123,
	10, 123,
	22, 123,
	-2, 0,
	-1, 55,
	2, 135,
	15, 135,
	59, 135,
	65, 135,
	-2, 93,
	-1, 56,
	2, 136,
	15, 136,
	59, 136,
	65, 136,
	-2, 94,
	-1, 57,
	2, 137,
	15, 137,
	59, 137,
	65, 137,
	-2, 96,
	-1, 58,
	2, 138,
	15, 138,
	59, 138,
	65, 138,
	-2, 97,
	-1, 59,
	2, 139,
	15, 139,
	59, 139,
	65, 139,
	-2, 102,
	-1, 60,
	2, 140,
	15, 140,
	59, 140,
	65, 140,
	-2, 104,
	-1, 61,
	2, 141,
	15, 141,
	59, 141,
	65, 141,
	-2, 106,
	-1, 62,
	2, 142,
	15, 142,
	59, 142,
	65, 142,
	-2, 107,
	-1, 63,
	2, 143,
	15, 143,
	59, 143,
	65, 143,
	-2, 108,
	-1, 64,
	2, 144,
	15, 144,
	59, 144,
	65, 144,
	-2, 109,
	-1, 65,
	2, 145,
	15, 145,
	59, 145,
	65, 145,
	-2, 110,
	-1, 182,
	8, 186,
	12, 186,
	13, 186,
	16, 186,
	17, 186,
	23, 186,
	26, 186,
	32, 186,
	33, 186,
	36, 186,
	42, 186,
	45, 186,
	46, 186,
	47, 186,
	48, 186,
	49, 186,
	50, 186,
	51, 186,
	52, 186,
	53, 186,
	54, 186,
	55, 186,
	59, 186,
	63, 186,
	-2, 0,
	-1, 183,
	8, 186,
	12, 186,
	13, 186,
	16, 186,
	17, 186,
	23, 186,
	26, 186,
	32, 186,
	33, 186,
	36, 186,
	42, 186,
	45, 186,
	46, 186,
	47, 186,
	48, 186,
	49, 186,
	50, 186,
	51, 186,
	52, 186,
	53, 186,
	54, 186,
	55, 186,
	59, 186,
	63, 186,
	-2, 0,
	-1, 199,
	19, 184,
	-2, 0,
	-1, 246,
	19, 185,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 708

var yyAct = [...]int{

	80, 252, 141, 203, 79, 33, 175, 73, 112, 34,
	101, 100, 180, 103, 181, 102, 126, 242, 243, 104,
	35, 182, 183, 54, 255, 174, 98, 235, 105, 121,
	120, 105, 155, 256, 253, 81, 99, 6, 82, 83,
	84, 234, 85, 86, 87, 88, 89, 90, 91, 92,
	93, 94, 35, 95, 96, 107, 119, 108, 98, 106,
	169, 236, 233, 177, 35, 176, 68, 29, 35, 115,
	98, 7, 103, 257, 77, 97, 30, 109, 104, 178,
	81, 168, 82, 83, 84, 95, 85, 86, 87, 88,
	89, 90, 91, 92, 93, 94, 53, 95, 96, 9,
	9, 144, 230, 2, 3, 4, 5, 97, 81, 81,
	154, 146, 250, 147, 200, 229, 115, 249, 199, 97,
	1, 122, 148, 151, 165, 167, 160, 179, 245, 45,
	248, 198, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 75, 171, 44, 43,
	42, 114, 161, 163, 173, 81, 74, 35, 115, 176,
	75, 113, 166, 162, 164, 114, 232, 231, 177, 150,
	74, 35, 46, 10, 125, 113, 72, 41, 69, 237,
	81, 111, 149, 70, 178, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 240,
	241, 244, 246, 238, 239, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 40,
	158, 118, 114, 247, 145, 157, 117, 142, 35, 205,
	143, 143, 113, 39, 143, 251, 156, 116, 254, 214,
	8, 123, 152, 220, 31, 38, 124, 258, 37, 36,
	172, 76, 81, 259, 170, 201, 71, 260, 52, 216,
	217, 204, 159, 218, 47, 35, 110, 0, 0, 0,
	0, 98, 206, 208, 210, 211, 219, 221, 224, 225,
	226, 227, 228, 205, 83, 207, 209, 212, 213, 215,
	222, 223, 0, 214, 92, 93, 0, 220, 95, 0,
	0, 202, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 0, 0, 218, 0, 0,
	97, 0, 0, 0, 0, 0, 206, 208, 210, 211,
	219, 221, 224, 225, 226, 227, 228, 0, 0, 207,
	209, 212, 213, 215, 222, 223, 35, 0, 0, 0,
	48, 68, 0, 50, 21, 49, 0, 0, 153, 0,
	0, 51, 0, 0, 66, 0, 0, 0, 0, 0,
	17, 18, 0, 0, 19, 0, 0, 0, 0, 0,
	67, 0, 0, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 0, 0, 0, 13, 35, 0,
	78, 23, 48, 68, 0, 50, 21, 49, 0, 0,
	0, 0, 0, 51, 0, 0, 66, 0, 0, 0,
	0, 0, 17, 18, 0, 0, 19, 0, 0, 0,
	0, 0, 67, 0, 0, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 0, 0, 0, 13,
	35, 0, 32, 23, 48, 68, 0, 50, 21, 49,
	0, 0, 0, 0, 0, 51, 0, 0, 66, 0,
	0, 0, 0, 0, 17, 18, 0, 0, 19, 0,
	0, 0, 0, 0, 67, 0, 0, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 0, 35,
	0, 13, 0, 48, 68, 23, 50, 21, 49, 0,
	0, 0, 0, 0, 51, 0, 0, 66, 0, 0,
	0, 0, 0, 17, 18, 0, 0, 19, 16, 68,
	0, 0, 21, 67, 0, 0, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 0, 17, 18,
	13, 0, 19, 0, 23, 0, 16, 29, 0, 0,
	21, 11, 12, 14, 15, 20, 22, 24, 25, 26,
	27, 28, 0, 0, 0, 13, 17, 18, 0, 23,
	19, 0, 35, 0, 0, 0, 0, 0, 98, 11,
	12, 14, 15, 20, 22, 24, 25, 26, 27, 28,
	82, 83, 84, 13, 85, 86, 87, 23, 89, 90,
	91, 92, 93, 94, 0, 95, 96, 0, 0, 0,
	35, 0, 0, 0, 0, 0, 98, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 82, 83,
	84, 0, 85, 86, 0, 0, 89, 90, 0, 92,
	93, 94, 35, 95, 96, 0, 0, 0, 98, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 83, 0, 0, 0, 97, 0, 0, 0, 0,
	0, 92, 93, 0, 0, 95, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97,
}
var yyPact = [...]int{

	35, 61, 544, 544, 442, 516, -1000, -1000, -1000, 54,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 158,
	-1000, 72, -1000, 390, 56, 60, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 13, 16, -1000,
	491, -1000, 491, 53, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 163, -1000,
	-1000, 219, -1000, -1000, 28, -1000, 7, -1000, -1000, 56,
	491, -1000, -42, -42, -42, -42, -42, -42, -42, -42,
	-42, -42, -42, -42, -42, -42, -42, 225, 222, -1000,
	16, -46, -1000, 167, 167, 338, -1000, 12, 44, -1000,
	218, -1000, -1000, 124, -1000, 220, -1000, 144, -1000, 58,
	-1000, 142, 491, -1000, -50, -39, -1000, 491, 491, 491,
	491, 491, 491, 491, 491, 491, 491, 491, 491, 491,
	491, -1000, -1000, -1000, 112, -1000, -1000, -1000, -1000, 281,
	-1000, -1000, 95, -1000, 56, -1000, -1000, 149, -1000, 39,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3, 37, -1000, -1000, -1000, -1000, 48, 48, 257,
	167, 167, 167, 167, 44, 644, 644, 644, 612, 574,
	644, 644, 612, 44, 44, 644, 44, 257, -1000, 221,
	-1000, 110, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	491, -1000, -1000, -1000, -1000, 17, 17, 0, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 14, 71, -1000, -1000, 227,
	-1000, 56, -1000, -1000, -1000, 17, -1000, -1000, -1000, -1000,
	-1000,
}
var yyPgo = [...]int{

	0, 266, 8, 264, 3, 262, 261, 96, 258, 0,
	173, 256, 240, 7, 255, 18, 17, 254, 251, 1,
	25, 250, 6, 249, 11, 121, 248, 246, 4, 245,
	242, 10, 241, 23, 233, 219, 177, 174, 150, 149,
	148, 129, 172, 2, 128, 120, 76,
}
var yyR1 = [...]int{

	0, 45, 45, 45, 45, 45, 45, 45, 45, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 23, 23, 23, 23, 24, 24, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 25, 27, 27, 37, 37, 32, 32,
	32, 32, 15, 15, 15, 15, 14, 14, 14, 4,
	4, 29, 31, 31, 30, 30, 30, 38, 36, 36,
	34, 40, 40, 40, 40, 40, 41, 42, 42, 42,
	33, 33, 33, 1, 1, 1, 2, 2, 2, 2,
	2, 12, 12, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 10, 10, 10, 10, 11, 11, 11, 13, 13,
	13, 13, 46, 18, 18, 18, 18, 17, 17, 17,
	17, 17, 21, 21, 21, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 8,
	8, 5, 5, 5, 5, 35, 20, 22, 22, 19,
	43, 39, 9, 9, 44, 44, 16, 16,
}
var yyR2 = [...]int{

	0, 2, 2, 2, 3, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 3, 3, 2, 2, 2, 2, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 1, 0, 1, 3, 3, 1, 1,
	3, 3, 3, 4, 2, 1, 3, 1, 2, 1,
	1, 2, 3, 2, 3, 1, 2, 3, 3, 3,
	4, 6, 6, 5, 4, 3, 2, 2, 1, 1,
	3, 4, 2, 3, 1, 2, 3, 3, 2, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 4, 2, 0, 3, 1, 2, 3, 3,
	2, 1, 2, 0, 3, 2, 1, 1, 3, 1,
	3, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 1,
	1, 1, 1, 2, 0, 1, 0, 1,
}
var yyChk = [...]int{

	-1000, -45, 68, 69, 70, 71, 2, 10, -12, -7,
	-10, 45, 46, 59, 47, 48, 12, 32, 33, 36,
	49, 16, 50, 63, 51, 52, 53, 54, 55, 13,
	-46, -12, 10, -9, -28, 8, -23, -26, -29, -34,
	-35, -36, -38, -39, -40, -41, -42, -3, 12, 17,
	15, 23, -8, -7, -33, 45, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 26, 42, 13, -42,
	-10, -11, 18, -13, 12, 2, -18, 2, 10, -28,
	-9, -9, 26, 27, 28, 30, 31, 32, 33, 34,
	35, 36, 37, 38, 39, 41, 42, 63, 14, -9,
	-24, -31, 2, 59, 65, 15, -31, -28, -28, -33,
	-1, 18, -2, 12, 2, -9, 18, 7, 2, 28,
	2, 22, -25, -32, -27, -37, 58, -25, -25, -25,
	-25, -25, -25, -25, -25, -25, -25, -25, -25, -25,
	-25, -43, 2, 9, -43, 2, -31, -24, -15, 15,
	2, -15, -30, 20, -28, 20, 18, 7, 2, -5,
	2, 28, 39, 29, 40, -2, 18, -13, 23, 2,
	-17, 5, -21, 12, -20, -22, 17, 26, 42, -28,
	62, 64, 60, 61, -28, -28, -28, -28, -28, -28,
	-28, -28, -28, -28, -28, -28, -28, -28, 19, 6,
	2, -14, 20, -4, -6, 2, 45, 58, 46, 59,
	47, 48, 60, 61, 12, 62, 32, 33, 36, 49,
	16, 50, 63, 64, 51, 52, 53, 54, 55, 20,
	7, 18, -2, 23, 2, 24, 24, -22, -20, -20,
	-15, -15, -16, -15, -16, -44, -43, 2, 20, 7,
	2, -28, -19, 17, -19, 24, 19, 2, 20, -4,
	-19,
}
var yyDef = [...]int{

	0, -2, 114, 114, 0, 0, 8, 7, 1, 114,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 0,
	2, -2, 3, 0, 5, 182, 9, 10, 11, 12,
	13, 14, 15, 16, 17, 18, 19, 0, 98, 175,
	0, 181, 0, 78, 79, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 169, 170, 0, 6,
	91, 0, 113, 116, 0, 121, 122, 126, 4, 20,
	0, 21, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 0, 0, 183,
	0, 24, 25, 0, 0, 0, 61, 0, 76, 77,
	0, 82, 84, 0, 89, 0, 111, 0, 117, 0,
	120, 125, 0, 43, 48, 49, 45, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 68, 69, 180, 0, 75, 22, 23, 26, 0,
	55, 27, 0, 63, 65, 67, 80, 0, 85, 0,
	88, 171, 172, 173, 174, 90, 112, 115, 118, 119,
	124, 127, 129, 132, 133, 134, 176, 0, 0, 28,
	0, 0, -2, -2, 29, 30, 31, 32, 33, 34,
	35, 36, 37, 38, 39, 40, 41, 42, 70, -2,
	74, 0, 54, 57, 59, 60, 146, 147, 148, 149,
	150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
	160, 161, 162, 163, 164, 165, 166, 167, 168, 62,
	66, 81, 83, 86, 87, 0, 0, 0, 177, 178,
	46, 47, 50, 187, 51, 0, -2, 73, 52, 0,
	58, 64, 128, 179, 130, 0, 71, 72, 53, 56,
	131,
}
var yyTok1 = [...]int{

	1,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:164
		{
			yylex.(*parser).generatedParserResult = yyDollar[2].labels
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:167
		{
			yylex.(*parser).addParseErrf(PositionRange{}, "no expression found in input")
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:169
		{
			yylex.(*parser).addParseErrf(PositionRange{}, "no expression found in input")
		}
	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:171
		{
			yylex.(*parser).generatedParserResult = yyDollar[2].node
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:173
		{
			yylex.(*parser).generatedParserResult = yyDollar[2].node
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:176
		{
			yylex.(*parser).unexpected("", "")
		}
	case 20:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:192
		{
			yyDollar[2].node.AttachComment(yyDollar[1].item, true)
			yyVAL.node = yyDollar[2].node
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:197
		{
			yyDollar[1].node.AttachComment(yyDollar[2].item, false)
			yyVAL.node = yyDollar[1].node
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:208
		{
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, yyDollar[2].node, yyDollar[3].node)
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:210
		{
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, yyDollar[3].node, yyDollar[2].node)
		}
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:212
		{
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, &AggregateExpr{}, yyDollar[2].node)
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:214
		{
			yylex.(*parser).unexpected("aggregation", "")
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, &AggregateExpr{}, Expressions{})
		}
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:222
		{
			yyVAL.node = &AggregateExpr{
				Grouping: yyDollar[2].strings,
			}
		}
	case 27:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:228
		{
			yyVAL.node = &AggregateExpr{
				Grouping: yyDollar[2].strings,
				Without:  true,
			}
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:241
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 29:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:242
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:243
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:244
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:245
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:246
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:247
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:248
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:249
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:250
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:251
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:252
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:253
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:254
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:255
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
//line generated_parser.y:263
		{
			yyVAL.node = &BinaryExpr{
				VectorMatching: &VectorMatching{Card: CardOneToOne},
			}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:268
		{
			yyVAL.node = &BinaryExpr{
				VectorMatching: &VectorMatching{Card: CardOneToOne},
				ReturnBool:     true,
			}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:276
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.MatchingLabels = yyDollar[3].strings
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:281
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.MatchingLabels = yyDollar[3].strings
			yyVAL.node.(*BinaryExpr).VectorMatching.On = true
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:291
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.Card = CardManyToOne
			yyVAL.node.(*BinaryExpr).VectorMatching.Include = yyDollar[3].strings
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:297
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.Card = CardOneToMany
			yyVAL.node.(*BinaryExpr).VectorMatching.Include = yyDollar[3].strings
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:306
		{
			yyVAL.strings = yyDollar[2].strings
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:308
		{
			yyVAL.strings = yyDollar[2].strings
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:310
		{
			yyVAL.strings = []string{}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:312
		{
			yylex.(*parser).unexpected("grouping opts", "\"(\"")
			yyVAL.strings = nil
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:318
		{
			yyVAL.strings = append(yyDollar[1].strings, yyDollar[3].item.Val)
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:320
		{
			yyVAL.strings = []string{yyDollar[1].item.Val}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:322
		{
			yylex.(*parser).unexpected("grouping opts", "\",\" or \")\"")
			yyVAL.strings = yyDollar[1].strings
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:326
		{
			if !isLabel(yyDollar[1].item.Val) {
				yylex.(*parser).unexpected("grouping opts", "label")
			}
			yyVAL.item = yyDollar[1].item
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:333
		{
			yylex.(*parser).unexpected("grouping opts", "label")
			yyVAL.item = Item{}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:341
		{
			fn, exist := getFunction(yyDollar[1].item.Val)
			if !exist {
				yylex.(*parser).addParseErrf(yyDollar[1].item.PositionRange(), "unknown function with name %q", yyDollar[1].item.Val)
			}
			yyVAL.node = &Call{
				Func: fn,
				Args: yyDollar[2].node.(Expressions),
				PosRange: PositionRange{
					Start: yyDollar[1].item.Pos,
					End:   yylex.(*parser).lastClosing,
				},
			}
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:358
		{
			yyVAL.node = yyDollar[2].node
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:360
		{
			yyVAL.node = Expressions{}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:364
		{
			yyVAL.node = append(yyDollar[1].node.(Expressions), yyDollar[3].node.(Expr))
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:366
		{
			yyVAL.node = Expressions{yyDollar[1].node.(Expr)}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:368
		{
			yylex.(*parser).addParseErrf(yyDollar[2].item.PositionRange(), "trailing commas not allowed in function call args")
			yyVAL.node = yyDollar[1].node
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:379
		{
			yyVAL.node = &ParenExpr{Expr: yyDollar[2].node.(Expr), PosRange: mergeRanges(&yyDollar[1].item, &yyDollar[3].item)}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:387
		{
			yylex.(*parser).addOffset(yyDollar[1].node, yyDollar[3].duration)
			yyVAL.node = yyDollar[1].node
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:392
		{
			yylex.(*parser).unexpected("offset", "duration")
			yyVAL.node = yyDollar[1].node
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:400
		{
			var errMsg string
			vs, ok := yyDollar[1].node.(*VectorSelector)
			if !ok {
				errMsg = "ranges only allowed for vector selectors"
			} else if vs.Offset != 0 {
				errMsg = "no offset modifiers allowed before range"
			}

			if errMsg != "" {
				errRange := mergeRanges(&yyDollar[2].item, &yyDollar[4].item)
				yylex.(*parser).addParseErrf(errRange, errMsg)
			}

			yyVAL.node = &MatrixSelector{
				VectorSelector: yyDollar[1].node.(Expr),
				Range:          yyDollar[3].duration,
				EndPos:         yylex.(*parser).lastClosing,
			}
		}
	case 71:
		yyDollar = yyS[yypt-6 : yypt+1]
//line generated_parser.y:423
		{
			yyVAL.node = &SubqueryExpr{
				Expr:  yyDollar[1].node.(Expr),
				Range: yyDollar[3].duration,
				Step:  yyDollar[5].duration,

				EndPos: yyDollar[6].item.Pos + 1,
			}
		}
	case 72:
		yyDollar = yyS[yypt-6 : yypt+1]
//line generated_parser.y:433
		{
			yylex.(*parser).unexpected("subquery selector", "\"]\"")
			yyVAL.node = yyDollar[1].node
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
//line generated_parser.y:435
		{
			yylex.(*parser).unexpected("subquery selector", "duration or \"]\"")
			yyVAL.node = yyDollar[1].node
		}
	case 74:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:437
		{
			yylex.(*parser).unexpected("subquery or range", "\":\" or \"]\"")
			yyVAL.node = yyDollar[1].node
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:439
		{
			yylex.(*parser).unexpected("subquery selector", "duration")
			yyVAL.node = yyDollar[1].node
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:449
		{
			if nl, ok := yyDollar[2].node.(*NumberLiteral); ok {
				if yyDollar[1].item.Typ == SUB {
					nl.Val *= -1
				}
				nl.PosRange.Start = yyDollar[1].item.Pos
				yyVAL.node = nl
			} else {
				yyVAL.node = &UnaryExpr{Op: yyDollar[1].item.Typ, Expr: yyDollar[2].node.(Expr), StartPos: yyDollar[1].item.Pos}
			}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:467
		{
			vs := yyDollar[2].node.(*VectorSelector)
			vs.PosRange = mergeRanges(&yyDollar[1].item, vs)
			vs.Name = yyDollar[1].item.Val
			yylex.(*parser).assembleVectorSelector(vs)
			yyVAL.node = vs
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:475
		{
			vs := &VectorSelector{
				Name:          yyDollar[1].item.Val,
				LabelMatchers: []*labels.Matcher{},
				PosRange:      yyDollar[1].item.PositionRange(),
			}
			yylex.(*parser).assembleVectorSelector(vs)
			yyVAL.node = vs
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:485
		{
			vs := yyDollar[1].node.(*VectorSelector)
			yylex.(*parser).assembleVectorSelector(vs)
			yyVAL.node = vs
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:493
		{
			yyVAL.node = &VectorSelector{
				LabelMatchers: yyDollar[2].matchers,
				PosRange:      mergeRanges(&yyDollar[1].item, &yyDollar[3].item),
			}
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:500
		{
			yyVAL.node = &VectorSelector{
				LabelMatchers: yyDollar[2].matchers,
				PosRange:      mergeRanges(&yyDollar[1].item, &yyDollar[4].item),
			}
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:507
		{
			yyVAL.node = &VectorSelector{
				LabelMatchers: []*labels.Matcher{},
				PosRange:      mergeRanges(&yyDollar[1].item, &yyDollar[2].item),
			}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:516
		{
			if yyDollar[1].matchers != nil {
				yyVAL.matchers = append(yyDollar[1].matchers, yyDollar[3].matcher)
			} else {
				yyVAL.matchers = yyDollar[1].matchers
			}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:524
		{
			yyVAL.matchers = []*labels.Matcher{yyDollar[1].matcher}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:526
		{
			yylex.(*parser).unexpected("label matching", "\",\" or \"}\"")
			yyVAL.matchers = yyDollar[1].matchers
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:530
		{
			yyVAL.matcher = yylex.(*parser).newLabelMatcher(yyDollar[1].item, yyDollar[2].item, yyDollar[3].item)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:532
		{
			yylex.(*parser).unexpected("label matching", "string")
			yyVAL.matcher = nil
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:534
		{
			yylex.(*parser).unexpected("label matching", "label matching operator")
			yyVAL.matcher = nil
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:536
		{
			yylex.(*parser).unexpected("label matching", "identifier or \"}\"")
			yyVAL.matcher = nil
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:538
		{
			yyVAL.matcher = yyDollar[2].matcher
			yyVAL.matcher.Comment = "\n" + yyDollar[1].item.Val + "\n"
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:549
		{
			yyVAL.labels = append(yyDollar[2].labels, labels.Label{Name: labels.MetricName, Value: yyDollar[1].item.Val})
			sort.Sort(yyVAL.labels)
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:551
		{
			yyVAL.labels = yyDollar[1].labels
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:558
		{
			yyVAL.labels = labels.New(yyDollar[2].labels...)
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:560
		{
			yyVAL.labels = labels.New(yyDollar[2].labels...)
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:562
		{
			yyVAL.labels = labels.New()
		}
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
//line generated_parser.y:564
		{
			yyVAL.labels = labels.New()
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:568
		{
			yyVAL.labels = append(yyDollar[1].labels, yyDollar[3].label)
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:570
		{
			yyVAL.labels = []labels.Label{yyDollar[1].label}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:572
		{
			yylex.(*parser).unexpected("label set", "\",\" or \"}\"")
			yyVAL.labels = yyDollar[1].labels
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:577
		{
			yyVAL.label = labels.Label{Name: yyDollar[1].item.Val, Value: yylex.(*parser).unquoteString(yyDollar[3].item.Val)}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:579
		{
			yylex.(*parser).unexpected("label set", "string")
			yyVAL.label = labels.Label{}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:581
		{
			yylex.(*parser).unexpected("label set", "\"=\"")
			yyVAL.label = labels.Label{}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:583
		{
			yylex.(*parser).unexpected("label set", "identifier or \"}\"")
			yyVAL.label = labels.Label{}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:591
		{
			yylex.(*parser).generatedParserResult = &seriesDescription{
				labels: yyDollar[1].labels,
				values: yyDollar[2].series,
			}
		}
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
//line generated_parser.y:600
		{
			yyVAL.series = []SequenceValue{}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:602
		{
			yyVAL.series = append(yyDollar[1].series, yyDollar[3].series...)
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:604
		{
			yyVAL.series = yyDollar[1].series
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:606
		{
			yylex.(*parser).unexpected("series values", "")
			yyVAL.series = nil
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:610
		{
			yyVAL.series = []SequenceValue{{Omitted: true}}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:612
		{
			yyVAL.series = []SequenceValue{}
			for i := uint64(0); i < yyDollar[3].uint; i++ {
				yyVAL.series = append(yyVAL.series, SequenceValue{Omitted: true})
			}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:619
		{
			yyVAL.series = []SequenceValue{{Value: yyDollar[1].float}}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line generated_parser.y:621
		{
			yyVAL.series = []SequenceValue{}
			for i := uint64(0); i <= yyDollar[3].uint; i++ {
				yyVAL.series = append(yyVAL.series, SequenceValue{Value: yyDollar[1].float})
			}
		}
	case 131:
		yyDollar = yyS[yypt-4 : yypt+1]
//line generated_parser.y:628
		{
			yyVAL.series = []SequenceValue{}
			for i := uint64(0); i <= yyDollar[4].uint; i++ {
				yyVAL.series = append(yyVAL.series, SequenceValue{Value: yyDollar[1].float})
				yyDollar[1].float += yyDollar[2].float
			}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:638
		{
			if yyDollar[1].item.Val != "stale" {
				yylex.(*parser).unexpected("series values", "number or \"stale\"")
			}
			yyVAL.float = math.Float64frombits(value.StaleNaN)
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:669
		{
			yyVAL.node = &NumberLiteral{
				Val:      yylex.(*parser).number(yyDollar[1].item.Val),
				PosRange: yyDollar[1].item.PositionRange(),
			}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:677
		{
			yyVAL.float = yylex.(*parser).number(yyDollar[1].item.Val)
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:679
		{
			yyVAL.float = yyDollar[2].float
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:680
		{
			yyVAL.float = -yyDollar[2].float
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:684
		{
			var err error
			yyVAL.uint, err = strconv.ParseUint(yyDollar[1].item.Val, 10, 64)
			if err != nil {
				yylex.(*parser).addParseErrf(yyDollar[1].item.PositionRange(), "invalid repetition in series values: %s", err)
			}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:694
		{
			var err error
			yyVAL.duration, err = parseDuration(yyDollar[1].item.Val)
			if err != nil {
				yylex.(*parser).addParseErr(yyDollar[1].item.PositionRange(), err)
			}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line generated_parser.y:705
		{
			yyVAL.node = &StringLiteral{
				Val:      yylex.(*parser).unquoteString(yyDollar[1].item.Val),
				PosRange: yyDollar[1].item.PositionRange(),
			}
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line generated_parser.y:715
		{
			yyVAL.item.Val = yyDollar[1].item.Val + "\n" + yyDollar[2].item.Val
		}
	case 184:
		yyDollar = yyS[yypt-0 : yypt+1]
//line generated_parser.y:725
		{
			yyVAL.duration = 0
		}
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
//line generated_parser.y:729
		{
			yyVAL.strings = nil
		}
	}
	goto yystack /* stack new state and value */
}
